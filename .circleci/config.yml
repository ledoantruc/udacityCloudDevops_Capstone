version: 2.1

orbs:
  slack: circleci/slack@4.12.5
  python: circleci/python@2.1.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1.5

commands:
  eks-config:
    description: Ensure EKS exist
    parameters:
      eks-cluster-name:
        type: string
        default: "CloudDevOps-Capstone"
      aws-region:
        type: string
        default: "us-east-1"
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"

    steps:

      - run:
          name: Install dependencies
          command: |
              sudo apt-get install tar curl unzip -y
      - run:
          name: Install eksctl and awscli
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin

            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install

            echo eks version: $(eksctl version)
            echo aws version: $(aws --version)

      - run:
          name: Ensure EKS Cluster exists
          command: |
            if eksctl get cluster --region=<< parameters.aws-region >> --name=<< parameters.eks-cluster-name >> > /dev/null
            then
              echo "EKS cluster << parameters.eks-cluster-name >> already exists. No need to create new one"
            else
              echo Will create EKS Cluster << parameters.eks-cluster-name >>
              eksctl create cluster --name << parameters.eks-cluster-name >> --region=<< parameters.aws-region >>
            fi
            
      - run:
          name: Update EKS configuration file
          command: |
            aws eks update-kubeconfig --name << parameters.eks-cluster-name >> --region << parameters.aws-region >>


jobs:
  eks-config:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup    
      - eks-config:
          eks-cluster-name: 'CloudDevOps-Capstone'
          aws-region: 'us-east-1'

  lint:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - run:
          name: Install hadolint
          command: |
            cd python-helloworld
            sudo pip install --upgrade pip && sudo pip install -r requirements.txt
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              sudo chmod +x /bin/hadolint
            
      - run:
          name: Lint
          command: |
            # This is linter for Dockerfiles
            cd python-helloworld
            hadolint Dockerfile
            pylint --disable=R,C,W1203,W1202 app.py


  build-push-docker-image:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: build and push Docker image
          command: |
            dockerpath="truclemsoft"
            image_name="clouddevops-capstone"
            # tag="v1.0-$CIRCLE_BUILD_NUM"
            tag="latest"
            
            cd python-helloworld
            docker build --tag "${dockerpath}/${image_name}:${tag}" .

            # List docker images
            docker image ls
            
            # Authenticate & tag
            # https://docs.docker.com/engine/reference/commandline/login/
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          
            docker image push "$dockerpath/$image_name:$tag"

workflows:
  Capstone-Project:
    jobs:
      - eks-config
      - lint
      - build-push-docker-image:
          requires: [lint]
          filters:
            branches:
              only: [main]

      